generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  email     String    @unique
  password  String

  executionHistories ExecutionHistory[]
  folders   Folder[]
  sharedcode SharedCode[]
  comments Comment[]
  profile Userprofile[]
  apiToken ApiToken[]
  subscription Subscription[]
  interviewcontent InterviewContent[]
  exam Exam[]
  answer ExamAnswer[]
  studentexam StudentExam[] @relation(name: "StudentUser")
  assignedExams StudentExam[] @relation(name: "AssignedAdmin")

  StudentExamAnswer StudentExamAnswer[]
}

model ExecutionHistory {
  id        Int      @id @default(autoincrement())
  userId    Int      
  code      String   @db.LongText()
  language  String   
  output    String   @db.Text()
  createdAt DateTime @default(now())
  comments Comment[]
  fileId  Int?
  file      File? @relation(fields: [fileId], references: [id], onDelete: Cascade)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id       Int      @id @default(autoincrement())
  name     String   
  userId   Int
  files    File[]
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // Ensures folder names are unique per user
}

model File {
  id       Int      @id @default(autoincrement())
  name     String
  content  String   @db.Text()
  folderId Int

  ExecutionHistory ExecutionHistory[]
  folder   Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([name, folderId]) // Ensures file names are unique inside a folder
}

model SharedCode {
  id        String   @id @default(uuid())
  userId    Int
  code      String   @db.LongText()
  language  String
  output    String?  @db.Text()
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id         Int       @id @default(autoincrement())
  roomId     String    @unique
  createdBy  String ?    // Using Socket ID instead of user ID
  createdAt  DateTime  @default(now())

  users      UserRoom[]
}

model UserRoom {
  id        Int     @id @default(autoincrement())
  socketId  String  // Store Socket ID instead of user ID
  roomId     String
  access    String  @default("read") // "read" or "write"

  room      Room    @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

  @@unique([socketId, roomId]) // Ensures a socket can join a room only once
}


model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int// References SharedCode.id
  content   String   @db.Text()
  createdAt DateTime @default(now())
  executionId   Int  
  likes Int @default(0)
  dislikes Int @default(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   execution       ExecutionHistory  @relation(fields: [executionId], references: [id], onDelete: Cascade)
  @@index([content(length: 255)]) // Fix: Added length limit (255) for uniqueness
}

model Userprofile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  firstName      String
  lastName       String
  email          String?
  phoneNumber    String?
  city           String?
  state          String?
  country        String?
  postcode       String?
  createdAt      DateTime @default(now())
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiToken{
  id Int @id @default(autoincrement())
  userId Int @unique
  token String @unique
  createdAt DateTime @default(now())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model  Subscription{
  id Int @id @default(autoincrement())
  userId Int @unique
  planType String
  isActive Boolean @default(true)
  subscribedAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model  InterviewContent{
  id Int @id @default(autoincrement())
  userId Int
  title String
  content String @db.LongText()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Exam{
  id Int @id @default(autoincrement())
  userId Int
  topic String
  questions Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers ExamAnswer[]

}

model ExamAnswer{
  id Int @id @default(autoincrement())
  examId Int
  userId Int
  answers Json
  score Int
  evaluated Boolean @default(false)
  createdAt DateTime @default(now())
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model StudentExam {
  id          Int      @id @default(autoincrement())
  userId      Int
  assignedBy  Int
  topic       String
  questions   Json
  status      String   @default("pending") // "pending", "completed", "evaluated"
  createdAt   DateTime @default(now())
  answers     StudentExamAnswer[]

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "StudentUser")
  admin       User     @relation(fields: [assignedBy], references: [id], onDelete: Cascade, name: "AssignedAdmin")
}

model StudentExamAnswer {
  id          Int      @id @default(autoincrement())
  studentExamId Int
  userId      Int
  answers     Json
  score       Int?
  evaluated   Boolean  @default(false)
  createdAt   DateTime @default(now())

  studentExam StudentExam @relation(fields: [studentExamId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}