generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  email     String    @unique
  password  String
  executionHistories ExecutionHistory[]
  folders   Folder[]
  sharedcode SharedCode[]
}

model ExecutionHistory {
  id        Int      @id @default(autoincrement())
  userId    Int      
  code      String   @db.LongText()
  language  String   
  output    String   @db.Text()
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id       Int      @id @default(autoincrement())
  name     String   
  userId   Int
  files    File[]
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // Ensures folder names are unique per user
}

model File {
  id       Int      @id @default(autoincrement())
  name     String
  content  String   @db.Text()
  folderId Int

  folder   Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([name, folderId]) // Ensures file names are unique inside a folder
}

model SharedCode {
  id        String   @id @default(uuid())
  userId    Int
  code      String   @db.LongText()
  language  String
  output    String?  @db.Text()
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id         Int       @id @default(autoincrement())
  roomId     String    @unique
  createdBy  String    // Using Socket ID instead of user ID
  createdAt  DateTime  @default(now())

  users      UserRoom[]
}

model UserRoom {
  id        Int     @id @default(autoincrement())
  socketId  String  // Store Socket ID instead of user ID
  roomId    Int
  access    String  @default("read") // "read" or "write"

  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([socketId, roomId]) // Ensures a socket can join a room only once
}
